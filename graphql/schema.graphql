### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Conversation {
  id: String
  messages: [Message]
  userOneId: String
  userTwoId: String
}

type ConversationReturn {
  id: String
  username: String
  usersId: String
}

"""DateTime custom scalar type."""
scalar DateTime

type Email {
  email: String
}

type Friend {
  friendID: String
  friendedAt: DateTime
  id: String
  usersId: String
}

type GetFriend {
  id: String!
  rowId: String!
  username: String!
}

type Message {
  conversationId: String
  id: String
  message: String
  recipientID: String
  seen: Boolean
  sentAt: [DateTime]
}

type Mutation {
  CreateConversation(userOneId: String!, userTwoId: String!): Conversation!
  UpdateSettings(darkMode: Boolean, universityPreference: String, usersId: String!): Settings!
  createFriend(friendID: String!, usersId: String!): Friend!
  createFriendRequest(friendID: String!, usersId: String!): friendRequest!
  createMessage(conversationId: String!, message: String!, senderId: String!): Message!
  createUser(birthday: String!, course: String!, email: String!, firstName: String!, lastName: String!, university: String!, username: String!): User!
  deleteFriend(id: String!): Friend!
  deleteFriendRequest(id: String!): friendRequest!
  deleteMessage(id: String!): Message!
  deleteUser(id: String!): User!
  markMessageAsRead(id: String!): Message!
  updateUser(bio: String, birthday: String, course: String, firstName: String, id: String!, lastName: String, university: String, username: String): User!
}

type Query {
  CheckUsernameIsTaken(username: String!): Boolean!
  UserQueryByEmail(all: Boolean, bio: Boolean, birthday: Boolean, course: Boolean, email: String!, firstName: Boolean, id: Boolean, lastName: Boolean, settings: Boolean, university: Boolean, username: Boolean): User
  getAuthFromUsername(username: String!): Email!
  getConversations(id: String!): [ConversationReturn]!
  getFriendRequests(friendID: String!): [GetFriend]!
  getFriends(usersId: String!): [GetFriend]!
  getUserFromAuth(email: String!): User!
  user: [User]!
  users(all: Boolean, bio: Boolean, birthday: Boolean, course: Boolean, email: Boolean, firstName: Boolean, id: String!, lastName: Boolean, settings: Boolean, university: Boolean, username: Boolean): User
}

type Settings {
  darkMode: Boolean
  id: String
  universityPreference: String
  usersId: String
}

type Subscription {
  GetMessages(id: String!): [Message]!
}

type User {
  bio: String
  birthday: String
  course: String
  email: String
  firstName: String
  friendRequests: [friendRequest]
  friends: [Friend]
  id: String
  lastName: String
  recievedMessages: [Message]
  sentMessages: [Message]
  settings: Settings
  university: String
  username: String
}

type friendRequest {
  createdAt: DateTime
  friendID: String
  id: String
  usersId: String
}