generator client {
  provider             = "prisma-client-js"
  referentialIntegrity = "prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                                            String           @id @default(uuid())
  firstName                                     String
  lastName                                      String
  birthday                                      String
  university                                    String
  course                                        String
  bio                                           String
  username                                      String           @unique
  email                                         String           @unique
  FriendRequests_FriendRequests_friendIDToUsers FriendRequests[] @relation("FriendRequests_friendIDToUsers")
  friendRequests                                FriendRequests[]
  Friends_Friends_friendIDToUsers               Friends[]        @relation("Friends_friendIDToUsers")
  friends                                       Friends[]
  sentMessages                                  Messages[]       @relation("sentMessages")
  settings                                      Settings?        @relation("settings")
  conversationsAsUserOne                        Conversations[]  @relation("conversations1")
  conversationsAsUserTwo                        Conversations[]  @relation("conversations2")
}

model Friends {
  id                            String   @id @unique @default(uuid())
  friendedAt                    DateTime @default(now())
  friendID                      String
  usersId                       String?
  Users_Friends_friendIDToUsers Users    @relation("Friends_friendIDToUsers", fields: [friendID], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Users                         Users?   @relation(fields: [usersId], references: [id])
}

model FriendRequests {
  id                                   String   @id @unique @default(uuid())
  createdAt                            DateTime @default(now())
  friendID                             String
  status                               Boolean  @default(false)
  usersId                              String?
  Users_FriendRequests_friendIDToUsers Users    @relation("FriendRequests_friendIDToUsers", fields: [friendID], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Users                                Users?   @relation(fields: [usersId], references: [id])
}

model Messages {
  id             String        @id @unique @default(uuid())
  sentAt         DateTime      @default(now())
  seen           Boolean       @default(false)
  conversationId String
  senderId       String
  message        String
  sender         Users         @relation("sentMessages", fields: [senderId], references: [id])
  conversation   Conversations @relation("messages", fields: [conversationId], references: [id])
}

model Settings {
  id                   String  @id @unique @default(uuid())
  darkMode             Boolean @default(false)
  universityPreference String  @default("OWN")
  usersId              String  @unique
  User                 Users   @relation("settings", fields: [usersId], references: [id])
}

model Conversations {
  id        String     @id @unique @default(uuid())
  userOneId String
  userOne   Users      @relation("conversations1", fields: [userOneId], references: [id])
  userTwoId String
  userTwo   Users      @relation("conversations2", fields: [userTwoId], references: [id])
  messages  Messages[] @relation("messages")
}
